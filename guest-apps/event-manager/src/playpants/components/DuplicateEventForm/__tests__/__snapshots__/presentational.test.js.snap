// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`DuplicateEventFormStateless renders default properly 1`] = `
<Form
  name="duplicate-event-form"
  onSubmit={[MockFunction]}
>
  <Field
    component={[Function]}
    fullWidth={true}
    label="Environments"
    name="formEnvironment"
    onChange={[Function]}
    validate={
      Array [
        [Function],
      ]
    }
    value="Development"
  >
    <WithStyles(ForwardRef(MenuItem))
      key="Development"
      value="Development"
    >
      Development
    </WithStyles(ForwardRef(MenuItem))>
    <WithStyles(ForwardRef(MenuItem))
      key="Certification"
      value="Certification"
    >
      Certification
    </WithStyles(ForwardRef(MenuItem))>
    <WithStyles(ForwardRef(MenuItem))
      key="Live"
      value="Live"
    >
      Live
    </WithStyles(ForwardRef(MenuItem))>
  </Field>
  <Field
    autoComplete="off"
    clearable={true}
    component={
      Object {
        "$$typeof": Symbol(react.memo),
        "WrappedComponent": [Function],
        "compare": null,
        "displayName": "Connect(FormFieldDateTimePicker)",
        "type": [Function],
      }
    }
    footerLabel="Confirm"
    fullWidth={true}
    label="Start Date"
    margin="normal"
    maxDate={1568317716}
    minDate={1567540522}
    name="formDateTime"
    rangeLabels={
      Object {
        "endDate": "End Date (Optional)",
        "startDate": "Start Date",
      }
    }
    ranged={true}
    returnTimestamp={true}
    validate={
      Array [
        [Function],
      ]
    }
  />
  <Field
    component={[Function]}
    fullWidth={true}
    label="Platforms"
    multiple={true}
    name="formPlatforms"
    onChange={[Function]}
    validate={
      Array [
        [Function],
      ]
    }
    value={
      Array [
        "PS4",
      ]
    }
  >
    <WithStyles(ForwardRef(MenuItem))
      key="PS4"
      value="PS4"
    >
      PS4
    </WithStyles(ForwardRef(MenuItem))>
    <WithStyles(ForwardRef(MenuItem))
      key="XB1"
      value="XB1"
    >
      XB1
    </WithStyles(ForwardRef(MenuItem))>
    <WithStyles(ForwardRef(MenuItem))
      key="CROSSPLAY"
      value="CROSSPLAY"
    >
      CROSSPLAY
    </WithStyles(ForwardRef(MenuItem))>
  </Field>
</Form>
`;
