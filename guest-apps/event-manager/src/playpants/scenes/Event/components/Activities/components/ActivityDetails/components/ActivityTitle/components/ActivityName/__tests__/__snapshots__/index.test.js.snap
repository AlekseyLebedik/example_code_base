// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ActivityName renders correctly 1`] = `
<ActivityName
  RevertDialog={[MockFunction]}
  activityContext={
    Object {
      "disabled": true,
      "selectedActivity": Object {},
      "titles": Array [],
    }
  }
  activitySettings={
    Array [
      Object {
        "allow_duplication": true,
        "allow_multi_titles": true,
        "allow_revert": false,
        "context": Object {
          "is_enabled": false,
          "type": "title",
        },
        "enabled": false,
        "name": "Message of The Day",
        "type": "motd",
      },
      Object {
        "allow_duplication": true,
        "allow_multi_titles": true,
        "allow_revert": false,
        "context": Object {
          "is_enabled": false,
          "type": "title",
        },
        "enabled": false,
        "name": "Playlists",
        "type": "playlist",
      },
      Object {
        "allow_duplication": true,
        "allow_multi_titles": false,
        "allow_revert": true,
        "context": Object {
          "is_enabled": false,
          "type": "title",
        },
        "enabled": true,
        "name": "Publisher Variables",
        "type": "pubvars",
        "variable_mapping": Object {
          "LKKNORQKTP": "mp_xp_mult_scale",
          "MSTMLNKSSO": "mp_weapon_xp",
        },
      },
      Object {
        "allow_duplication": false,
        "allow_multi_titles": false,
        "allow_revert": true,
        "context": Object {
          "is_enabled": false,
          "type": "title",
        },
        "enabled": true,
        "name": "Publisher Storage",
        "type": "pubstorage",
      },
      Object {
        "allow_duplication": true,
        "allow_multi_titles": false,
        "allow_revert": true,
        "context": Object {
          "is_enabled": false,
          "type": "title",
        },
        "enabled": true,
        "name": "Python Script",
        "type": "pyscript",
      },
      Object {
        "allow_duplication": true,
        "allow_multi_titles": false,
        "allow_revert": true,
        "context": Object {
          "is_enabled": true,
          "type": "title",
        },
        "enabled": true,
        "name": "Achievements Engine",
        "type": "ae",
      },
      Object {
        "allow_duplication": true,
        "allow_multi_titles": false,
        "allow_revert": true,
        "context": Object {
          "is_enabled": true,
          "type": "title",
        },
        "enabled": true,
        "name": "Publisher Objects",
        "type": "publisher_objects",
      },
    ]
  }
  allowDetachedEvents={false}
  allowDuplication={true}
  allowMultiTitles={true}
  allowRevert={true}
  badgeCount={
    Object {
      "discussion": 2,
      "tasks": 0,
    }
  }
  baseUrl="/event-manager/3/"
  changeMainTab={[MockFunction]}
  classes={Object {}}
  conflicts={Array []}
  contextType=""
  contextsData={
    Array [
      "1",
      "test",
      "another",
    ]
  }
  currentUser={
    Object {
      "id": 1,
      "name": "Initial User",
    }
  }
  customComponent={Object {}}
  dateTime={[MockFunction]}
  deleteEvent={[MockFunction]}
  disableTitleSelector={false}
  disabled={false}
  downloadFile={[MockFunction]}
  editAuths={[MockFunction]}
  editEvent={[MockFunction]}
  event={
    Object {
      "data": Object {
        "activities": Array [
          Object {
            "activity": Object {
              "inputs": Array [
                Object {
                  "language": "sp",
                  "text": "Hola Amigo :D",
                },
              ],
            },
            "exec_order": 0,
            "id": 13,
            "publish_on": "on_start",
            "title_envs": Array [
              1,
            ],
            "type": "motd",
            "updated_by": Object {
              "id": 1,
              "name": "Initial User",
            },
          },
          Object {
            "activity": Object {
              "inputs": Array [
                Object {
                  "key": "weapon_type",
                  "value": "Gun",
                },
                Object {
                  "key": "attachment_icons",
                  "value": Array [],
                },
                Object {
                  "key": "invalid",
                  "value": "test",
                },
              ],
              "name": "Double XP",
              "template_id": "double_xp",
              "version": "v1.0.4",
            },
            "exec_order": 1,
            "id": 12,
            "publish_on": "on_start",
            "title_envs": Array [
              4,
            ],
            "type": "pyscript",
            "updated_by": Object {
              "id": 1,
              "name": "Initial User",
            },
          },
          Object {
            "activity": Object {
              "ruleset_to_activate": Object {
                "activationTimestamp": null,
                "code": "idiwoq03292kj4lsl",
                "codeHash": "4mhdBfYBdYmeco1ve62h0b6rue8=",
                "codeSignatureTimestamp": 1565841879,
                "code_signature": "v/kWwu8MBe1GGSxK64a3OqKynmKpGJYGlylUMT0asJ+ZHiuonlDAl2igzISRqgMuPWJf/HqCxvAbxuAMxq+YCg==",
                "creationTimestamp": 1565841879,
                "isActive": true,
                "label": "stronghold-5",
                "lastUpdateTimestamp": 1565842668,
              },
            },
            "exec_order": 0,
            "id": 1,
            "publish_on": "on_start",
            "title_envs": Array [
              1,
            ],
            "type": "ae",
            "updated_by": Object {
              "id": 1,
              "name": "Initial User",
            },
          },
          Object {
            "activity": Object {
              "deploy": Array [
                Object {
                  "build_uid": "e36576c1fb46e4d60c9ccf1cb5ae2f01dfcd96c6e226b424c715aec84155bd9b",
                  "target_name": "uidev:dev(mp)",
                  "uid": "tp_deployment_1",
                },
              ],
              "modify": Array [
                Object {
                  "build_uid": "84fe6b23-9eef-4fcd-b350-cef71c228eaa3",
                  "uid": "modify_1",
                  "user_params": Object {},
                },
              ],
              "undeploy": Array [
                Object {
                  "build_uid": "84fe6b23-9eef-4fcd-b350-cef71c228eaa2",
                  "uid": "undeploy_1",
                },
              ],
            },
            "exec_order": 0,
            "id": 2,
            "publish_on": "on_start",
            "title_envs": Array [
              1,
            ],
            "type": "tp_deployment",
            "updated_by": Object {
              "id": 1,
              "name": "Initial User",
            },
          },
        ],
        "authorizations": Array [],
        "authorizers": Array [],
        "auto_tags": Array [
          "PS4",
        ],
        "created_at": 1560983839,
        "created_by": Object {
          "id": 1,
          "name": "Initial User",
        },
        "end_at": 1561243001,
        "env_type": "Development",
        "event_type": "event-manager",
        "id": 2,
        "is_schedule": false,
        "locked_by": 1,
        "manual_tags": Array [
          "PS4",
        ],
        "note": "testing notes",
        "platforms": Array [
          "PS",
        ],
        "project": 1,
        "publish_at": 1561057200,
        "status": "open",
        "task": null,
        "title": "Test Event",
        "updated_at": 1560985103,
        "updated_by": Object {
          "id": 1,
          "name": "Initial User",
        },
      },
      "loading": false,
    }
  }
  eventData={Object {}}
  eventId={2}
  eventUrl=""
  fileDetailsFetch={[MockFunction]}
  handleSetPrimaryTab={[MockFunction]}
  handleSetSecondaryTab={[MockFunction]}
  history={Object {}}
  isEventManagerEvent={true}
  isLoadingEventsPage={false}
  loadDiscussion={[MockFunction]}
  loadEvent={[MockFunction]}
  noTitleSelected={false}
  onCloseRequestErrorDialog={[MockFunction]}
  onDeleteEvent={[MockFunction]}
  onNameChange={[MockFunction]}
  onSave={[MockFunction]}
  onTitlesChange={[MockFunction]}
  onUpdate={[MockFunction]}
  permissions={
    Object {
      "achievementWritePermission": true,
      "adminPermission": true,
      "eventWritePermission": true,
      "publisherObjectsWritePermission": true,
      "pubstorageWritePermission": true,
      "pubvarsWritePermission": true,
      "pyscriptWritePermission": true,
      "staffUser": true,
      "tpDeploymentWritePermission": true,
      "wipPermission": true,
    }
  }
  primaryTab="details"
  removeFile={[MockFunction]}
  requestErrorDialogOpen={
    Object {
      "open": false,
    }
  }
  saveEdit={[MockFunction]}
  secondaryTab="tasks"
  selectedActivity={Object {}}
  selectedItemId="12"
  selectedTab="activities"
  selectedTitle={
    Object {
      "id": 3,
    }
  }
  status={
    Object {
      "allowAuths": true,
      "canCancel": true,
      "canDelete": true,
      "canOpen": false,
      "failed": false,
      "locked": false,
      "name": "Open",
      "readOnly": false,
      "showAuths": false,
      "showTemplates": true,
    }
  }
  tabUrl="/event-manager/3/events/2/activities"
  titles={Array []}
  updateFile={[MockFunction]}
  updateUserProfileSetting={[MockFunction]}
  uploadFileAction={[MockFunction]}
  uploadProgress={
    Object {
      "1563392198": Object {
        "received": 776,
        "size": 776,
      },
    }
  }
  uploadProgressFetch={[MockFunction]}
  user={
    Object {
      "actions": Object {
        "createUserProfileSetting": [MockFunction],
        "updateUserProfileSetting": [MockFunction],
      },
    }
  }
>
  <WithStyles(ForwardRef(TextField))
    InputProps={
      Object {
        "startAdornment": <WithStyles(ForwardRef(InputAdornment))
          position="start"
        >
          Name
        </WithStyles(ForwardRef(InputAdornment))>,
      }
    }
    data-cy="activityNameField"
    disabled={false}
    inputProps={
      Object {
        "maxLength": 31,
      }
    }
    onBlur={[Function]}
    onChange={[Function]}
    onKeyDown={[Function]}
    value=""
  >
    <ForwardRef(TextField)
      InputProps={
        Object {
          "startAdornment": <WithStyles(ForwardRef(InputAdornment))
            position="start"
          >
            Name
          </WithStyles(ForwardRef(InputAdornment))>,
        }
      }
      classes={
        Object {
          "root": "MuiTextField-root",
        }
      }
      data-cy="activityNameField"
      disabled={false}
      inputProps={
        Object {
          "maxLength": 31,
        }
      }
      onBlur={[Function]}
      onChange={[Function]}
      onKeyDown={[Function]}
      value=""
    >
      <WithStyles(ForwardRef(FormControl))
        className="MuiTextField-root"
        color="primary"
        data-cy="activityNameField"
        disabled={false}
        error={false}
        fullWidth={false}
        onKeyDown={[Function]}
        required={false}
        variant="standard"
      >
        <ForwardRef(FormControl)
          className="MuiTextField-root"
          classes={
            Object {
              "fullWidth": "MuiFormControl-fullWidth",
              "marginDense": "MuiFormControl-marginDense",
              "marginNormal": "MuiFormControl-marginNormal",
              "root": "MuiFormControl-root",
            }
          }
          color="primary"
          data-cy="activityNameField"
          disabled={false}
          error={false}
          fullWidth={false}
          onKeyDown={[Function]}
          required={false}
          variant="standard"
        >
          <div
            className="MuiFormControl-root MuiTextField-root"
            data-cy="activityNameField"
            onKeyDown={[Function]}
          >
            <WithStyles(ForwardRef(Input))
              autoFocus={false}
              fullWidth={false}
              inputProps={
                Object {
                  "maxLength": 31,
                }
              }
              multiline={false}
              onBlur={[Function]}
              onChange={[Function]}
              startAdornment={
                <WithStyles(ForwardRef(InputAdornment))
                  position="start"
                >
                  Name
                </WithStyles(ForwardRef(InputAdornment))>
              }
              value=""
            >
              <ForwardRef(Input)
                autoFocus={false}
                classes={
                  Object {
                    "colorSecondary": "MuiInput-colorSecondary",
                    "disabled": "Mui-disabled",
                    "error": "Mui-error",
                    "focused": "Mui-focused",
                    "formControl": "MuiInput-formControl",
                    "fullWidth": "MuiInput-fullWidth",
                    "input": "MuiInput-input",
                    "inputMarginDense": "MuiInput-inputMarginDense",
                    "inputMultiline": "MuiInput-inputMultiline",
                    "inputTypeSearch": "MuiInput-inputTypeSearch",
                    "marginDense": "MuiInput-marginDense",
                    "multiline": "MuiInput-multiline",
                    "root": "MuiInput-root",
                    "underline": "MuiInput-underline",
                  }
                }
                fullWidth={false}
                inputProps={
                  Object {
                    "maxLength": 31,
                  }
                }
                multiline={false}
                onBlur={[Function]}
                onChange={[Function]}
                startAdornment={
                  <WithStyles(ForwardRef(InputAdornment))
                    position="start"
                  >
                    Name
                  </WithStyles(ForwardRef(InputAdornment))>
                }
                value=""
              >
                <WithStyles(ForwardRef(InputBase))
                  autoFocus={false}
                  classes={
                    Object {
                      "colorSecondary": "MuiInput-colorSecondary",
                      "disabled": "Mui-disabled",
                      "error": "Mui-error",
                      "focused": "Mui-focused",
                      "formControl": "MuiInput-formControl",
                      "fullWidth": "MuiInput-fullWidth",
                      "input": "MuiInput-input",
                      "inputMarginDense": "MuiInput-inputMarginDense",
                      "inputMultiline": "MuiInput-inputMultiline",
                      "inputTypeSearch": "MuiInput-inputTypeSearch",
                      "marginDense": "MuiInput-marginDense",
                      "multiline": "MuiInput-multiline",
                      "root": "MuiInput-root MuiInput-underline",
                      "underline": null,
                    }
                  }
                  fullWidth={false}
                  inputComponent="input"
                  inputProps={
                    Object {
                      "maxLength": 31,
                    }
                  }
                  multiline={false}
                  onBlur={[Function]}
                  onChange={[Function]}
                  startAdornment={
                    <WithStyles(ForwardRef(InputAdornment))
                      position="start"
                    >
                      Name
                    </WithStyles(ForwardRef(InputAdornment))>
                  }
                  type="text"
                  value=""
                >
                  <ForwardRef(InputBase)
                    autoFocus={false}
                    classes={
                      Object {
                        "adornedEnd": "MuiInputBase-adornedEnd",
                        "adornedStart": "MuiInputBase-adornedStart",
                        "colorSecondary": "MuiInputBase-colorSecondary MuiInput-colorSecondary",
                        "disabled": "Mui-disabled Mui-disabled",
                        "error": "Mui-error Mui-error",
                        "focused": "Mui-focused Mui-focused",
                        "formControl": "MuiInputBase-formControl MuiInput-formControl",
                        "fullWidth": "MuiInputBase-fullWidth MuiInput-fullWidth",
                        "input": "MuiInputBase-input MuiInput-input",
                        "inputAdornedEnd": "MuiInputBase-inputAdornedEnd",
                        "inputAdornedStart": "MuiInputBase-inputAdornedStart",
                        "inputHiddenLabel": "MuiInputBase-inputHiddenLabel",
                        "inputMarginDense": "MuiInputBase-inputMarginDense MuiInput-inputMarginDense",
                        "inputMultiline": "MuiInputBase-inputMultiline MuiInput-inputMultiline",
                        "inputTypeSearch": "MuiInputBase-inputTypeSearch MuiInput-inputTypeSearch",
                        "marginDense": "MuiInputBase-marginDense MuiInput-marginDense",
                        "multiline": "MuiInputBase-multiline MuiInput-multiline",
                        "root": "MuiInputBase-root MuiInput-root MuiInput-underline",
                      }
                    }
                    fullWidth={false}
                    inputComponent="input"
                    inputProps={
                      Object {
                        "maxLength": 31,
                      }
                    }
                    multiline={false}
                    onBlur={[Function]}
                    onChange={[Function]}
                    startAdornment={
                      <WithStyles(ForwardRef(InputAdornment))
                        position="start"
                      >
                        Name
                      </WithStyles(ForwardRef(InputAdornment))>
                    }
                    type="text"
                    value=""
                  >
                    <div
                      className="MuiInputBase-root MuiInput-root MuiInput-underline MuiInputBase-formControl MuiInput-formControl MuiInputBase-adornedStart"
                      onClick={[Function]}
                    >
                      <WithStyles(ForwardRef(InputAdornment))
                        position="start"
                      >
                        <ForwardRef(InputAdornment)
                          classes={
                            Object {
                              "disablePointerEvents": "MuiInputAdornment-disablePointerEvents",
                              "filled": "MuiInputAdornment-filled",
                              "hiddenLabel": "MuiInputAdornment-hiddenLabel",
                              "marginDense": "MuiInputAdornment-marginDense",
                              "positionEnd": "MuiInputAdornment-positionEnd",
                              "positionStart": "MuiInputAdornment-positionStart",
                              "root": "MuiInputAdornment-root",
                            }
                          }
                          position="start"
                        >
                          <div
                            className="MuiInputAdornment-root MuiInputAdornment-positionStart"
                          >
                            <WithStyles(ForwardRef(Typography))
                              color="textSecondary"
                            >
                              <ForwardRef(Typography)
                                classes={
                                  Object {
                                    "alignCenter": "MuiTypography-alignCenter",
                                    "alignJustify": "MuiTypography-alignJustify",
                                    "alignLeft": "MuiTypography-alignLeft",
                                    "alignRight": "MuiTypography-alignRight",
                                    "body1": "MuiTypography-body1",
                                    "body2": "MuiTypography-body2",
                                    "button": "MuiTypography-button",
                                    "caption": "MuiTypography-caption",
                                    "colorError": "MuiTypography-colorError",
                                    "colorInherit": "MuiTypography-colorInherit",
                                    "colorPrimary": "MuiTypography-colorPrimary",
                                    "colorSecondary": "MuiTypography-colorSecondary",
                                    "colorTextPrimary": "MuiTypography-colorTextPrimary",
                                    "colorTextSecondary": "MuiTypography-colorTextSecondary",
                                    "displayBlock": "MuiTypography-displayBlock",
                                    "displayInline": "MuiTypography-displayInline",
                                    "gutterBottom": "MuiTypography-gutterBottom",
                                    "h1": "MuiTypography-h1",
                                    "h2": "MuiTypography-h2",
                                    "h3": "MuiTypography-h3",
                                    "h4": "MuiTypography-h4",
                                    "h5": "MuiTypography-h5",
                                    "h6": "MuiTypography-h6",
                                    "noWrap": "MuiTypography-noWrap",
                                    "overline": "MuiTypography-overline",
                                    "paragraph": "MuiTypography-paragraph",
                                    "root": "MuiTypography-root",
                                    "srOnly": "MuiTypography-srOnly",
                                    "subtitle1": "MuiTypography-subtitle1",
                                    "subtitle2": "MuiTypography-subtitle2",
                                  }
                                }
                                color="textSecondary"
                              >
                                <p
                                  className="MuiTypography-root MuiTypography-body1 MuiTypography-colorTextSecondary"
                                >
                                  Name
                                </p>
                              </ForwardRef(Typography)>
                            </WithStyles(ForwardRef(Typography))>
                          </div>
                        </ForwardRef(InputAdornment)>
                      </WithStyles(ForwardRef(InputAdornment))>
                      <input
                        aria-invalid={false}
                        autoFocus={false}
                        className="MuiInputBase-input MuiInput-input MuiInputBase-inputAdornedStart"
                        disabled={false}
                        maxLength={31}
                        onAnimationStart={[Function]}
                        onBlur={[Function]}
                        onChange={[Function]}
                        onFocus={[Function]}
                        required={false}
                        type="text"
                        value=""
                      />
                    </div>
                  </ForwardRef(InputBase)>
                </WithStyles(ForwardRef(InputBase))>
              </ForwardRef(Input)>
            </WithStyles(ForwardRef(Input))>
          </div>
        </ForwardRef(FormControl)>
      </WithStyles(ForwardRef(FormControl))>
    </ForwardRef(TextField)>
  </WithStyles(ForwardRef(TextField))>
</ActivityName>
`;
