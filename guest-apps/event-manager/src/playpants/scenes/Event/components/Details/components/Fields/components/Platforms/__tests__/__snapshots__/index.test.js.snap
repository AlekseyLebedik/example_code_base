// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Platforms renders the Platforms component correctly 1`] = `
<PlatformsBase
  allowDetachedEvents={false}
  badgeCount={
    Object {
      "discussion": 2,
      "tasks": 0,
    }
  }
  baseUrl="/event-manager/3/"
  changeMainTab={[MockFunction]}
  classes={Object {}}
  clearable={true}
  conflicts={Array []}
  currentUser={
    Object {
      "id": 1,
      "name": "Initial User",
    }
  }
  dateTime={[MockFunction]}
  deleteEvent={[MockFunction]}
  detachedEvent={false}
  disabled={false}
  editAuths={[MockFunction]}
  editEvent={[MockFunction]}
  event={
    Object {
      "data": Object {
        "activities": Array [
          Object {
            "activity": Object {
              "inputs": Array [
                Object {
                  "language": "sp",
                  "text": "Hola Amigo :D",
                },
              ],
            },
            "exec_order": 0,
            "id": 13,
            "publish_on": "on_start",
            "title_envs": Array [
              1,
            ],
            "type": "motd",
            "updated_by": Object {
              "id": 1,
              "name": "Initial User",
            },
          },
          Object {
            "activity": Object {
              "inputs": Array [
                Object {
                  "key": "weapon_type",
                  "value": "Gun",
                },
                Object {
                  "key": "attachment_icons",
                  "value": Array [],
                },
                Object {
                  "key": "invalid",
                  "value": "test",
                },
              ],
              "name": "Double XP",
              "template_id": "double_xp",
              "version": "v1.0.4",
            },
            "exec_order": 1,
            "id": 12,
            "publish_on": "on_start",
            "title_envs": Array [
              4,
            ],
            "type": "pyscript",
            "updated_by": Object {
              "id": 1,
              "name": "Initial User",
            },
          },
          Object {
            "activity": Object {
              "ruleset_to_activate": Object {
                "activationTimestamp": null,
                "code": "idiwoq03292kj4lsl",
                "codeHash": "4mhdBfYBdYmeco1ve62h0b6rue8=",
                "codeSignatureTimestamp": 1565841879,
                "code_signature": "v/kWwu8MBe1GGSxK64a3OqKynmKpGJYGlylUMT0asJ+ZHiuonlDAl2igzISRqgMuPWJf/HqCxvAbxuAMxq+YCg==",
                "creationTimestamp": 1565841879,
                "isActive": true,
                "label": "stronghold-5",
                "lastUpdateTimestamp": 1565842668,
              },
            },
            "exec_order": 0,
            "id": 1,
            "publish_on": "on_start",
            "title_envs": Array [
              1,
            ],
            "type": "ae",
            "updated_by": Object {
              "id": 1,
              "name": "Initial User",
            },
          },
          Object {
            "activity": Object {
              "deploy": Array [
                Object {
                  "build_uid": "e36576c1fb46e4d60c9ccf1cb5ae2f01dfcd96c6e226b424c715aec84155bd9b",
                  "target_name": "uidev:dev(mp)",
                  "uid": "tp_deployment_1",
                },
              ],
              "modify": Array [
                Object {
                  "build_uid": "84fe6b23-9eef-4fcd-b350-cef71c228eaa3",
                  "uid": "modify_1",
                  "user_params": Object {},
                },
              ],
              "undeploy": Array [
                Object {
                  "build_uid": "84fe6b23-9eef-4fcd-b350-cef71c228eaa2",
                  "uid": "undeploy_1",
                },
              ],
            },
            "exec_order": 0,
            "id": 2,
            "publish_on": "on_start",
            "title_envs": Array [
              1,
            ],
            "type": "tp_deployment",
            "updated_by": Object {
              "id": 1,
              "name": "Initial User",
            },
          },
        ],
        "authorizations": Array [],
        "authorizers": Array [],
        "auto_tags": Array [
          "PS4",
        ],
        "created_at": 1560983839,
        "created_by": Object {
          "id": 1,
          "name": "Initial User",
        },
        "end_at": 1561243001,
        "env_type": "Development",
        "event_type": "event-manager",
        "id": 2,
        "is_schedule": false,
        "locked_by": 1,
        "manual_tags": Array [
          "PS4",
        ],
        "note": "testing notes",
        "platforms": Array [
          "PS",
        ],
        "project": 1,
        "publish_at": 1561057200,
        "status": "open",
        "task": null,
        "title": "Test Event",
        "updated_at": 1560985103,
        "updated_by": Object {
          "id": 1,
          "name": "Initial User",
        },
      },
      "loading": false,
    }
  }
  eventData={Object {}}
  eventId={2}
  eventUrl="/event-manager/3/events/2"
  handleSetPrimaryTab={[MockFunction]}
  handleSetSecondaryTab={[MockFunction]}
  hasEndDate={false}
  history={
    Object {
      "push": [MockFunction],
    }
  }
  isConfigured={
    Object {
      "stories": true,
    }
  }
  isEventManagerEvent={true}
  isLoadingEventsPage={false}
  loadDiscussion={[MockFunction]}
  loadEvent={[MockFunction]}
  onCloseRequestErrorDialog={[MockFunction]}
  onDeleteEvent={[MockFunction]}
  onSave={[MockFunction]}
  permissions={
    Object {
      "achievementWritePermission": true,
      "adminPermission": true,
      "eventWritePermission": true,
      "publisherObjectsWritePermission": true,
      "pubstorageWritePermission": true,
      "pubvarsWritePermission": true,
      "pyscriptWritePermission": true,
      "staffUser": true,
      "tpDeploymentWritePermission": true,
      "wipPermission": true,
    }
  }
  platformSettings={
    Array [
      "CROSSPLAY",
      "PC",
      "PS4",
      "SWITCH",
      "XB1",
    ]
  }
  primaryTab="details"
  removeActivitySelection={[MockFunction]}
  requestErrorDialogOpen={
    Object {
      "open": false,
    }
  }
  saveEdit={[MockFunction]}
  secondaryTab="tasks"
  selectedTab="activities"
  setEndDate={[MockFunction]}
  status={
    Object {
      "allowAuths": true,
      "canCancel": true,
      "canDelete": true,
      "canOpen": false,
      "failed": false,
      "locked": false,
      "name": "Open",
      "readOnly": false,
      "showAuths": false,
      "showTemplates": true,
    }
  }
  storiesData={Array []}
  tabUrl="/event-manager/3/events/2/activities"
  type="publish_at"
  updateUserProfileSetting={[MockFunction]}
  user={
    Object {
      "actions": Object {
        "createUserProfileSetting": [MockFunction],
        "updateUserProfileSetting": [MockFunction],
      },
    }
  }
>
  <ReduxFormSelect
    data-cy="eventDetailsPlatforms"
    disabled={false}
    fullWidth={true}
    helperText={null}
    input={Object {}}
    label="Platforms"
    meta={Object {}}
    multiple={true}
    onChange={[Function]}
  >
    <SelectField
      ItemComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "Naked": Object {
            "$$typeof": Symbol(react.forward_ref),
            "propTypes": Object {
              "avatar": [Function],
              "children": [Function],
              "className": [Function],
              "classes": [Function],
              "clickable": [Function],
              "color": [Function],
              "component": [Function],
              "deleteIcon": [Function],
              "disabled": [Function],
              "icon": [Function],
              "label": [Function],
              "onClick": [Function],
              "onDelete": [Function],
              "onKeyDown": [Function],
              "onKeyUp": [Function],
              "size": [Function],
              "variant": [Function],
            },
            "render": [Function],
          },
          "displayName": "WithStyles(ForwardRef(Chip))",
          "options": Object {
            "defaultTheme": Object {
              "breakpoints": Object {
                "between": [Function],
                "down": [Function],
                "keys": Array [
                  "xs",
                  "sm",
                  "md",
                  "lg",
                  "xl",
                ],
                "only": [Function],
                "up": [Function],
                "values": Object {
                  "lg": 1280,
                  "md": 960,
                  "sm": 600,
                  "xl": 1920,
                  "xs": 0,
                },
                "width": [Function],
              },
              "direction": "ltr",
              "mixins": Object {
                "gutters": [Function],
                "toolbar": Object {
                  "@media (min-width:0px) and (orientation: landscape)": Object {
                    "minHeight": 48,
                  },
                  "@media (min-width:600px)": Object {
                    "minHeight": 64,
                  },
                  "minHeight": 56,
                },
              },
              "overrides": Object {},
              "palette": Object {
                "action": Object {
                  "activatedOpacity": 0.12,
                  "active": "rgba(0, 0, 0, 0.54)",
                  "disabled": "rgba(0, 0, 0, 0.26)",
                  "disabledBackground": "rgba(0, 0, 0, 0.12)",
                  "disabledOpacity": 0.38,
                  "focus": "rgba(0, 0, 0, 0.12)",
                  "focusOpacity": 0.12,
                  "hover": "rgba(0, 0, 0, 0.04)",
                  "hoverOpacity": 0.04,
                  "selected": "rgba(0, 0, 0, 0.08)",
                  "selectedOpacity": 0.08,
                },
                "augmentColor": [Function],
                "background": Object {
                  "default": "#fafafa",
                  "paper": "#fff",
                },
                "common": Object {
                  "black": "#000",
                  "white": "#fff",
                },
                "contrastThreshold": 3,
                "divider": "rgba(0, 0, 0, 0.12)",
                "error": Object {
                  "contrastText": "#fff",
                  "dark": "#d32f2f",
                  "light": "#e57373",
                  "main": "#f44336",
                },
                "getContrastText": [Function],
                "grey": Object {
                  "100": "#f5f5f5",
                  "200": "#eeeeee",
                  "300": "#e0e0e0",
                  "400": "#bdbdbd",
                  "50": "#fafafa",
                  "500": "#9e9e9e",
                  "600": "#757575",
                  "700": "#616161",
                  "800": "#424242",
                  "900": "#212121",
                  "A100": "#d5d5d5",
                  "A200": "#aaaaaa",
                  "A400": "#303030",
                  "A700": "#616161",
                },
                "info": Object {
                  "contrastText": "#fff",
                  "dark": "#1976d2",
                  "light": "#64b5f6",
                  "main": "#2196f3",
                },
                "primary": Object {
                  "contrastText": "#fff",
                  "dark": "#303f9f",
                  "light": "#7986cb",
                  "main": "#3f51b5",
                },
                "secondary": Object {
                  "contrastText": "#fff",
                  "dark": "#c51162",
                  "light": "#ff4081",
                  "main": "#f50057",
                },
                "success": Object {
                  "contrastText": "rgba(0, 0, 0, 0.87)",
                  "dark": "#388e3c",
                  "light": "#81c784",
                  "main": "#4caf50",
                },
                "text": Object {
                  "disabled": "rgba(0, 0, 0, 0.38)",
                  "hint": "rgba(0, 0, 0, 0.38)",
                  "primary": "rgba(0, 0, 0, 0.87)",
                  "secondary": "rgba(0, 0, 0, 0.54)",
                },
                "tonalOffset": 0.2,
                "type": "light",
                "warning": Object {
                  "contrastText": "rgba(0, 0, 0, 0.87)",
                  "dark": "#f57c00",
                  "light": "#ffb74d",
                  "main": "#ff9800",
                },
              },
              "props": Object {},
              "shadows": Array [
                "none",
                "0px 2px 1px -1px rgba(0,0,0,0.2),0px 1px 1px 0px rgba(0,0,0,0.14),0px 1px 3px 0px rgba(0,0,0,0.12)",
                "0px 3px 1px -2px rgba(0,0,0,0.2),0px 2px 2px 0px rgba(0,0,0,0.14),0px 1px 5px 0px rgba(0,0,0,0.12)",
                "0px 3px 3px -2px rgba(0,0,0,0.2),0px 3px 4px 0px rgba(0,0,0,0.14),0px 1px 8px 0px rgba(0,0,0,0.12)",
                "0px 2px 4px -1px rgba(0,0,0,0.2),0px 4px 5px 0px rgba(0,0,0,0.14),0px 1px 10px 0px rgba(0,0,0,0.12)",
                "0px 3px 5px -1px rgba(0,0,0,0.2),0px 5px 8px 0px rgba(0,0,0,0.14),0px 1px 14px 0px rgba(0,0,0,0.12)",
                "0px 3px 5px -1px rgba(0,0,0,0.2),0px 6px 10px 0px rgba(0,0,0,0.14),0px 1px 18px 0px rgba(0,0,0,0.12)",
                "0px 4px 5px -2px rgba(0,0,0,0.2),0px 7px 10px 1px rgba(0,0,0,0.14),0px 2px 16px 1px rgba(0,0,0,0.12)",
                "0px 5px 5px -3px rgba(0,0,0,0.2),0px 8px 10px 1px rgba(0,0,0,0.14),0px 3px 14px 2px rgba(0,0,0,0.12)",
                "0px 5px 6px -3px rgba(0,0,0,0.2),0px 9px 12px 1px rgba(0,0,0,0.14),0px 3px 16px 2px rgba(0,0,0,0.12)",
                "0px 6px 6px -3px rgba(0,0,0,0.2),0px 10px 14px 1px rgba(0,0,0,0.14),0px 4px 18px 3px rgba(0,0,0,0.12)",
                "0px 6px 7px -4px rgba(0,0,0,0.2),0px 11px 15px 1px rgba(0,0,0,0.14),0px 4px 20px 3px rgba(0,0,0,0.12)",
                "0px 7px 8px -4px rgba(0,0,0,0.2),0px 12px 17px 2px rgba(0,0,0,0.14),0px 5px 22px 4px rgba(0,0,0,0.12)",
                "0px 7px 8px -4px rgba(0,0,0,0.2),0px 13px 19px 2px rgba(0,0,0,0.14),0px 5px 24px 4px rgba(0,0,0,0.12)",
                "0px 7px 9px -4px rgba(0,0,0,0.2),0px 14px 21px 2px rgba(0,0,0,0.14),0px 5px 26px 4px rgba(0,0,0,0.12)",
                "0px 8px 9px -5px rgba(0,0,0,0.2),0px 15px 22px 2px rgba(0,0,0,0.14),0px 6px 28px 5px rgba(0,0,0,0.12)",
                "0px 8px 10px -5px rgba(0,0,0,0.2),0px 16px 24px 2px rgba(0,0,0,0.14),0px 6px 30px 5px rgba(0,0,0,0.12)",
                "0px 8px 11px -5px rgba(0,0,0,0.2),0px 17px 26px 2px rgba(0,0,0,0.14),0px 6px 32px 5px rgba(0,0,0,0.12)",
                "0px 9px 11px -5px rgba(0,0,0,0.2),0px 18px 28px 2px rgba(0,0,0,0.14),0px 7px 34px 6px rgba(0,0,0,0.12)",
                "0px 9px 12px -6px rgba(0,0,0,0.2),0px 19px 29px 2px rgba(0,0,0,0.14),0px 7px 36px 6px rgba(0,0,0,0.12)",
                "0px 10px 13px -6px rgba(0,0,0,0.2),0px 20px 31px 3px rgba(0,0,0,0.14),0px 8px 38px 7px rgba(0,0,0,0.12)",
                "0px 10px 13px -6px rgba(0,0,0,0.2),0px 21px 33px 3px rgba(0,0,0,0.14),0px 8px 40px 7px rgba(0,0,0,0.12)",
                "0px 10px 14px -6px rgba(0,0,0,0.2),0px 22px 35px 3px rgba(0,0,0,0.14),0px 8px 42px 7px rgba(0,0,0,0.12)",
                "0px 11px 14px -7px rgba(0,0,0,0.2),0px 23px 36px 3px rgba(0,0,0,0.14),0px 9px 44px 8px rgba(0,0,0,0.12)",
                "0px 11px 15px -7px rgba(0,0,0,0.2),0px 24px 38px 3px rgba(0,0,0,0.14),0px 9px 46px 8px rgba(0,0,0,0.12)",
              ],
              "shape": Object {
                "borderRadius": 4,
              },
              "spacing": [Function],
              "transitions": Object {
                "create": [Function],
                "duration": Object {
                  "complex": 375,
                  "enteringScreen": 225,
                  "leavingScreen": 195,
                  "short": 250,
                  "shorter": 200,
                  "shortest": 150,
                  "standard": 300,
                },
                "easing": Object {
                  "easeIn": "cubic-bezier(0.4, 0, 1, 1)",
                  "easeInOut": "cubic-bezier(0.4, 0, 0.2, 1)",
                  "easeOut": "cubic-bezier(0.0, 0, 0.2, 1)",
                  "sharp": "cubic-bezier(0.4, 0, 0.6, 1)",
                },
                "getAutoHeightDuration": [Function],
              },
              "typography": Object {
                "body1": Object {
                  "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                  "fontSize": "1rem",
                  "fontWeight": 400,
                  "letterSpacing": "0.00938em",
                  "lineHeight": 1.5,
                },
                "body2": Object {
                  "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                  "fontSize": "0.875rem",
                  "fontWeight": 400,
                  "letterSpacing": "0.01071em",
                  "lineHeight": 1.43,
                },
                "button": Object {
                  "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                  "fontSize": "0.875rem",
                  "fontWeight": 500,
                  "letterSpacing": "0.02857em",
                  "lineHeight": 1.75,
                  "textTransform": "uppercase",
                },
                "caption": Object {
                  "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                  "fontSize": "0.75rem",
                  "fontWeight": 400,
                  "letterSpacing": "0.03333em",
                  "lineHeight": 1.66,
                },
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": 14,
                "fontWeightBold": 700,
                "fontWeightLight": 300,
                "fontWeightMedium": 500,
                "fontWeightRegular": 400,
                "h1": Object {
                  "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                  "fontSize": "6rem",
                  "fontWeight": 300,
                  "letterSpacing": "-0.01562em",
                  "lineHeight": 1.167,
                },
                "h2": Object {
                  "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                  "fontSize": "3.75rem",
                  "fontWeight": 300,
                  "letterSpacing": "-0.00833em",
                  "lineHeight": 1.2,
                },
                "h3": Object {
                  "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                  "fontSize": "3rem",
                  "fontWeight": 400,
                  "letterSpacing": "0em",
                  "lineHeight": 1.167,
                },
                "h4": Object {
                  "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                  "fontSize": "2.125rem",
                  "fontWeight": 400,
                  "letterSpacing": "0.00735em",
                  "lineHeight": 1.235,
                },
                "h5": Object {
                  "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                  "fontSize": "1.5rem",
                  "fontWeight": 400,
                  "letterSpacing": "0em",
                  "lineHeight": 1.334,
                },
                "h6": Object {
                  "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                  "fontSize": "1.25rem",
                  "fontWeight": 500,
                  "letterSpacing": "0.0075em",
                  "lineHeight": 1.6,
                },
                "htmlFontSize": 16,
                "overline": Object {
                  "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                  "fontSize": "0.75rem",
                  "fontWeight": 400,
                  "letterSpacing": "0.08333em",
                  "lineHeight": 2.66,
                  "textTransform": "uppercase",
                },
                "pxToRem": [Function],
                "round": [Function],
                "subtitle1": Object {
                  "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                  "fontSize": "1rem",
                  "fontWeight": 400,
                  "letterSpacing": "0.00938em",
                  "lineHeight": 1.75,
                },
                "subtitle2": Object {
                  "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                  "fontSize": "0.875rem",
                  "fontWeight": 500,
                  "letterSpacing": "0.00714em",
                  "lineHeight": 1.57,
                },
              },
              "zIndex": Object {
                "appBar": 1100,
                "drawer": 1200,
                "mobileStepper": 1000,
                "modal": 1300,
                "snackbar": 1400,
                "speedDial": 1050,
                "tooltip": 1500,
              },
            },
            "name": "MuiChip",
          },
          "propTypes": Object {
            "classes": [Function],
            "innerRef": [Function],
          },
          "render": [Function],
          "useStyles": [Function],
        }
      }
      SelectProps={Object {}}
      _reduxForm={Object {}}
      classes={Object {}}
      data-cy="eventDetailsPlatforms"
      disabled={false}
      error={false}
      fullWidth={true}
      helperText={null}
      itemProps={Object {}}
      label="Platforms"
      multiple={true}
      onChange={[Function]}
      renderValueFunc={[Function]}
      value=""
    >
      <WithStyles(ForwardRef(TextField))
        SelectProps={
          Object {
            "MenuProps": Object {
              "PaperProps": Object {
                "style": Object {
                  "maxHeight": 256,
                },
              },
              "anchorOrigin": Object {
                "horizontal": "left",
                "vertical": "bottom",
              },
              "getContentAnchorEl": null,
            },
            "classes": Object {
              "select": "select",
            },
            "multiple": true,
            "renderValue": [Function],
          }
        }
        classes={Object {}}
        data-cy="eventDetailsPlatforms"
        disabled={false}
        error={false}
        fullWidth={true}
        helperText={null}
        label="Platforms"
        onChange={[Function]}
        onDrop={[Function]}
        select={true}
        value={Array []}
      >
        <ForwardRef(TextField)
          SelectProps={
            Object {
              "MenuProps": Object {
                "PaperProps": Object {
                  "style": Object {
                    "maxHeight": 256,
                  },
                },
                "anchorOrigin": Object {
                  "horizontal": "left",
                  "vertical": "bottom",
                },
                "getContentAnchorEl": null,
              },
              "classes": Object {
                "select": "select",
              },
              "multiple": true,
              "renderValue": [Function],
            }
          }
          classes={
            Object {
              "root": "MuiTextField-root",
            }
          }
          data-cy="eventDetailsPlatforms"
          disabled={false}
          error={false}
          fullWidth={true}
          helperText={null}
          label="Platforms"
          onChange={[Function]}
          onDrop={[Function]}
          select={true}
          value={Array []}
        >
          <WithStyles(ForwardRef(FormControl))
            className="MuiTextField-root"
            color="primary"
            data-cy="eventDetailsPlatforms"
            disabled={false}
            error={false}
            fullWidth={true}
            onDrop={[Function]}
            required={false}
            variant="standard"
          >
            <ForwardRef(FormControl)
              className="MuiTextField-root"
              classes={
                Object {
                  "fullWidth": "MuiFormControl-fullWidth",
                  "marginDense": "MuiFormControl-marginDense",
                  "marginNormal": "MuiFormControl-marginNormal",
                  "root": "MuiFormControl-root",
                }
              }
              color="primary"
              data-cy="eventDetailsPlatforms"
              disabled={false}
              error={false}
              fullWidth={true}
              onDrop={[Function]}
              required={false}
              variant="standard"
            >
              <div
                className="MuiFormControl-root MuiTextField-root MuiFormControl-fullWidth"
                data-cy="eventDetailsPlatforms"
                onDrop={[Function]}
              >
                <WithStyles(ForwardRef(InputLabel))>
                  <ForwardRef(InputLabel)
                    classes={
                      Object {
                        "animated": "MuiInputLabel-animated",
                        "asterisk": "MuiInputLabel-asterisk",
                        "disabled": "Mui-disabled",
                        "error": "Mui-error",
                        "filled": "MuiInputLabel-filled",
                        "focused": "Mui-focused",
                        "formControl": "MuiInputLabel-formControl",
                        "marginDense": "MuiInputLabel-marginDense",
                        "outlined": "MuiInputLabel-outlined",
                        "required": "Mui-required",
                        "root": "MuiInputLabel-root",
                        "shrink": "MuiInputLabel-shrink",
                      }
                    }
                  >
                    <WithStyles(ForwardRef(FormLabel))
                      className="MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated"
                      classes={
                        Object {
                          "asterisk": "MuiInputLabel-asterisk",
                          "disabled": "Mui-disabled",
                          "error": "Mui-error",
                          "focused": "Mui-focused",
                          "required": "Mui-required",
                        }
                      }
                      data-shrink={false}
                    >
                      <ForwardRef(FormLabel)
                        className="MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated"
                        classes={
                          Object {
                            "asterisk": "MuiFormLabel-asterisk MuiInputLabel-asterisk",
                            "colorSecondary": "MuiFormLabel-colorSecondary",
                            "disabled": "Mui-disabled Mui-disabled",
                            "error": "Mui-error Mui-error",
                            "filled": "MuiFormLabel-filled",
                            "focused": "Mui-focused Mui-focused",
                            "required": "Mui-required Mui-required",
                            "root": "MuiFormLabel-root",
                          }
                        }
                        data-shrink={false}
                      >
                        <label
                          className="MuiFormLabel-root MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated"
                          data-shrink={false}
                        >
                          Platforms
                        </label>
                      </ForwardRef(FormLabel)>
                    </WithStyles(ForwardRef(FormLabel))>
                  </ForwardRef(InputLabel)>
                </WithStyles(ForwardRef(InputLabel))>
                <WithStyles(ForwardRef(Select))
                  MenuProps={
                    Object {
                      "PaperProps": Object {
                        "style": Object {
                          "maxHeight": 256,
                        },
                      },
                      "anchorOrigin": Object {
                        "horizontal": "left",
                        "vertical": "bottom",
                      },
                      "getContentAnchorEl": null,
                    }
                  }
                  classes={
                    Object {
                      "select": "select",
                    }
                  }
                  input={
                    <WithStyles(ForwardRef(Input))
                      autoFocus={false}
                      fullWidth={true}
                      multiline={false}
                      onChange={[Function]}
                      value={Array []}
                    />
                  }
                  multiple={true}
                  renderValue={[Function]}
                  value={Array []}
                >
                  <ForwardRef(Select)
                    MenuProps={
                      Object {
                        "PaperProps": Object {
                          "style": Object {
                            "maxHeight": 256,
                          },
                        },
                        "anchorOrigin": Object {
                          "horizontal": "left",
                          "vertical": "bottom",
                        },
                        "getContentAnchorEl": null,
                      }
                    }
                    classes={
                      Object {
                        "disabled": "Mui-disabled",
                        "filled": "MuiSelect-filled",
                        "icon": "MuiSelect-icon",
                        "iconFilled": "MuiSelect-iconFilled",
                        "iconOpen": "MuiSelect-iconOpen",
                        "iconOutlined": "MuiSelect-iconOutlined",
                        "nativeInput": "MuiSelect-nativeInput",
                        "outlined": "MuiSelect-outlined",
                        "root": "MuiSelect-root",
                        "select": "MuiSelect-select select",
                        "selectMenu": "MuiSelect-selectMenu",
                      }
                    }
                    input={
                      <WithStyles(ForwardRef(Input))
                        autoFocus={false}
                        fullWidth={true}
                        multiline={false}
                        onChange={[Function]}
                        value={Array []}
                      />
                    }
                    multiple={true}
                    renderValue={[Function]}
                    value={Array []}
                  >
                    <WithStyles(ForwardRef(Input))
                      autoFocus={false}
                      fullWidth={true}
                      inputComponent={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "propTypes": Object {
                            "IconComponent": [Function],
                            "MenuProps": [Function],
                            "SelectDisplayProps": [Function],
                            "aria-label": [Function],
                            "autoFocus": [Function],
                            "autoWidth": [Function],
                            "children": [Function],
                            "className": [Function],
                            "classes": [Function],
                            "defaultValue": [Function],
                            "disabled": [Function],
                            "displayEmpty": [Function],
                            "inputRef": [Function],
                            "labelId": [Function],
                            "multiple": [Function],
                            "name": [Function],
                            "onBlur": [Function],
                            "onChange": [Function],
                            "onClose": [Function],
                            "onFocus": [Function],
                            "onOpen": [Function],
                            "open": [Function],
                            "readOnly": [Function],
                            "renderValue": [Function],
                            "tabIndex": [Function],
                            "type": [Function],
                            "value": [Function],
                            "variant": [Function],
                          },
                          "render": [Function],
                        }
                      }
                      inputProps={
                        Object {
                          "IconComponent": Object {
                            "$$typeof": Symbol(react.memo),
                            "compare": null,
                            "type": Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "render": [Function],
                            },
                          },
                          "MenuProps": Object {
                            "PaperProps": Object {
                              "style": Object {
                                "maxHeight": 256,
                              },
                            },
                            "anchorOrigin": Object {
                              "horizontal": "left",
                              "vertical": "bottom",
                            },
                            "getContentAnchorEl": null,
                          },
                          "SelectDisplayProps": Object {
                            "id": undefined,
                          },
                          "autoWidth": false,
                          "children": Array [
                            <WithStyles(ForwardRef(MenuItem))
                              value="CROSSPLAY"
                            >
                              CROSSPLAY
                            </WithStyles(ForwardRef(MenuItem))>,
                            <WithStyles(ForwardRef(MenuItem))
                              value="PC"
                            >
                              PC
                            </WithStyles(ForwardRef(MenuItem))>,
                            <WithStyles(ForwardRef(MenuItem))
                              value="PS4"
                            >
                              PS4
                            </WithStyles(ForwardRef(MenuItem))>,
                            <WithStyles(ForwardRef(MenuItem))
                              value="SWITCH"
                            >
                              SWITCH
                            </WithStyles(ForwardRef(MenuItem))>,
                            <WithStyles(ForwardRef(MenuItem))
                              value="XB1"
                            >
                              XB1
                            </WithStyles(ForwardRef(MenuItem))>,
                          ],
                          "classes": Object {
                            "disabled": "Mui-disabled",
                            "filled": "MuiSelect-filled",
                            "icon": "MuiSelect-icon",
                            "iconFilled": "MuiSelect-iconFilled",
                            "iconOpen": "MuiSelect-iconOpen",
                            "iconOutlined": "MuiSelect-iconOutlined",
                            "nativeInput": "MuiSelect-nativeInput",
                            "outlined": "MuiSelect-outlined",
                            "root": "MuiSelect-root",
                            "select": "MuiSelect-select select",
                            "selectMenu": "MuiSelect-selectMenu",
                          },
                          "displayEmpty": false,
                          "labelId": undefined,
                          "multiple": true,
                          "onClose": undefined,
                          "onOpen": undefined,
                          "open": undefined,
                          "renderValue": [Function],
                          "type": undefined,
                          "variant": "standard",
                        }
                      }
                      multiline={false}
                      onChange={[Function]}
                      value={Array []}
                    >
                      <ForwardRef(Input)
                        autoFocus={false}
                        classes={
                          Object {
                            "colorSecondary": "MuiInput-colorSecondary",
                            "disabled": "Mui-disabled",
                            "error": "Mui-error",
                            "focused": "Mui-focused",
                            "formControl": "MuiInput-formControl",
                            "fullWidth": "MuiInput-fullWidth",
                            "input": "MuiInput-input",
                            "inputMarginDense": "MuiInput-inputMarginDense",
                            "inputMultiline": "MuiInput-inputMultiline",
                            "inputTypeSearch": "MuiInput-inputTypeSearch",
                            "marginDense": "MuiInput-marginDense",
                            "multiline": "MuiInput-multiline",
                            "root": "MuiInput-root",
                            "underline": "MuiInput-underline",
                          }
                        }
                        fullWidth={true}
                        inputComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "propTypes": Object {
                              "IconComponent": [Function],
                              "MenuProps": [Function],
                              "SelectDisplayProps": [Function],
                              "aria-label": [Function],
                              "autoFocus": [Function],
                              "autoWidth": [Function],
                              "children": [Function],
                              "className": [Function],
                              "classes": [Function],
                              "defaultValue": [Function],
                              "disabled": [Function],
                              "displayEmpty": [Function],
                              "inputRef": [Function],
                              "labelId": [Function],
                              "multiple": [Function],
                              "name": [Function],
                              "onBlur": [Function],
                              "onChange": [Function],
                              "onClose": [Function],
                              "onFocus": [Function],
                              "onOpen": [Function],
                              "open": [Function],
                              "readOnly": [Function],
                              "renderValue": [Function],
                              "tabIndex": [Function],
                              "type": [Function],
                              "value": [Function],
                              "variant": [Function],
                            },
                            "render": [Function],
                          }
                        }
                        inputProps={
                          Object {
                            "IconComponent": Object {
                              "$$typeof": Symbol(react.memo),
                              "compare": null,
                              "type": Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "render": [Function],
                              },
                            },
                            "MenuProps": Object {
                              "PaperProps": Object {
                                "style": Object {
                                  "maxHeight": 256,
                                },
                              },
                              "anchorOrigin": Object {
                                "horizontal": "left",
                                "vertical": "bottom",
                              },
                              "getContentAnchorEl": null,
                            },
                            "SelectDisplayProps": Object {
                              "id": undefined,
                            },
                            "autoWidth": false,
                            "children": Array [
                              <WithStyles(ForwardRef(MenuItem))
                                value="CROSSPLAY"
                              >
                                CROSSPLAY
                              </WithStyles(ForwardRef(MenuItem))>,
                              <WithStyles(ForwardRef(MenuItem))
                                value="PC"
                              >
                                PC
                              </WithStyles(ForwardRef(MenuItem))>,
                              <WithStyles(ForwardRef(MenuItem))
                                value="PS4"
                              >
                                PS4
                              </WithStyles(ForwardRef(MenuItem))>,
                              <WithStyles(ForwardRef(MenuItem))
                                value="SWITCH"
                              >
                                SWITCH
                              </WithStyles(ForwardRef(MenuItem))>,
                              <WithStyles(ForwardRef(MenuItem))
                                value="XB1"
                              >
                                XB1
                              </WithStyles(ForwardRef(MenuItem))>,
                            ],
                            "classes": Object {
                              "disabled": "Mui-disabled",
                              "filled": "MuiSelect-filled",
                              "icon": "MuiSelect-icon",
                              "iconFilled": "MuiSelect-iconFilled",
                              "iconOpen": "MuiSelect-iconOpen",
                              "iconOutlined": "MuiSelect-iconOutlined",
                              "nativeInput": "MuiSelect-nativeInput",
                              "outlined": "MuiSelect-outlined",
                              "root": "MuiSelect-root",
                              "select": "MuiSelect-select select",
                              "selectMenu": "MuiSelect-selectMenu",
                            },
                            "displayEmpty": false,
                            "labelId": undefined,
                            "multiple": true,
                            "onClose": undefined,
                            "onOpen": undefined,
                            "open": undefined,
                            "renderValue": [Function],
                            "type": undefined,
                            "variant": "standard",
                          }
                        }
                        multiline={false}
                        onChange={[Function]}
                        value={Array []}
                      >
                        <WithStyles(ForwardRef(InputBase))
                          autoFocus={false}
                          classes={
                            Object {
                              "colorSecondary": "MuiInput-colorSecondary",
                              "disabled": "Mui-disabled",
                              "error": "Mui-error",
                              "focused": "Mui-focused",
                              "formControl": "MuiInput-formControl",
                              "fullWidth": "MuiInput-fullWidth",
                              "input": "MuiInput-input",
                              "inputMarginDense": "MuiInput-inputMarginDense",
                              "inputMultiline": "MuiInput-inputMultiline",
                              "inputTypeSearch": "MuiInput-inputTypeSearch",
                              "marginDense": "MuiInput-marginDense",
                              "multiline": "MuiInput-multiline",
                              "root": "MuiInput-root MuiInput-underline",
                              "underline": null,
                            }
                          }
                          fullWidth={true}
                          inputComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "propTypes": Object {
                                "IconComponent": [Function],
                                "MenuProps": [Function],
                                "SelectDisplayProps": [Function],
                                "aria-label": [Function],
                                "autoFocus": [Function],
                                "autoWidth": [Function],
                                "children": [Function],
                                "className": [Function],
                                "classes": [Function],
                                "defaultValue": [Function],
                                "disabled": [Function],
                                "displayEmpty": [Function],
                                "inputRef": [Function],
                                "labelId": [Function],
                                "multiple": [Function],
                                "name": [Function],
                                "onBlur": [Function],
                                "onChange": [Function],
                                "onClose": [Function],
                                "onFocus": [Function],
                                "onOpen": [Function],
                                "open": [Function],
                                "readOnly": [Function],
                                "renderValue": [Function],
                                "tabIndex": [Function],
                                "type": [Function],
                                "value": [Function],
                                "variant": [Function],
                              },
                              "render": [Function],
                            }
                          }
                          inputProps={
                            Object {
                              "IconComponent": Object {
                                "$$typeof": Symbol(react.memo),
                                "compare": null,
                                "type": Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "render": [Function],
                                },
                              },
                              "MenuProps": Object {
                                "PaperProps": Object {
                                  "style": Object {
                                    "maxHeight": 256,
                                  },
                                },
                                "anchorOrigin": Object {
                                  "horizontal": "left",
                                  "vertical": "bottom",
                                },
                                "getContentAnchorEl": null,
                              },
                              "SelectDisplayProps": Object {
                                "id": undefined,
                              },
                              "autoWidth": false,
                              "children": Array [
                                <WithStyles(ForwardRef(MenuItem))
                                  value="CROSSPLAY"
                                >
                                  CROSSPLAY
                                </WithStyles(ForwardRef(MenuItem))>,
                                <WithStyles(ForwardRef(MenuItem))
                                  value="PC"
                                >
                                  PC
                                </WithStyles(ForwardRef(MenuItem))>,
                                <WithStyles(ForwardRef(MenuItem))
                                  value="PS4"
                                >
                                  PS4
                                </WithStyles(ForwardRef(MenuItem))>,
                                <WithStyles(ForwardRef(MenuItem))
                                  value="SWITCH"
                                >
                                  SWITCH
                                </WithStyles(ForwardRef(MenuItem))>,
                                <WithStyles(ForwardRef(MenuItem))
                                  value="XB1"
                                >
                                  XB1
                                </WithStyles(ForwardRef(MenuItem))>,
                              ],
                              "classes": Object {
                                "disabled": "Mui-disabled",
                                "filled": "MuiSelect-filled",
                                "icon": "MuiSelect-icon",
                                "iconFilled": "MuiSelect-iconFilled",
                                "iconOpen": "MuiSelect-iconOpen",
                                "iconOutlined": "MuiSelect-iconOutlined",
                                "nativeInput": "MuiSelect-nativeInput",
                                "outlined": "MuiSelect-outlined",
                                "root": "MuiSelect-root",
                                "select": "MuiSelect-select select",
                                "selectMenu": "MuiSelect-selectMenu",
                              },
                              "displayEmpty": false,
                              "labelId": undefined,
                              "multiple": true,
                              "onClose": undefined,
                              "onOpen": undefined,
                              "open": undefined,
                              "renderValue": [Function],
                              "type": undefined,
                              "variant": "standard",
                            }
                          }
                          multiline={false}
                          onChange={[Function]}
                          type="text"
                          value={Array []}
                        >
                          <ForwardRef(InputBase)
                            autoFocus={false}
                            classes={
                              Object {
                                "adornedEnd": "MuiInputBase-adornedEnd",
                                "adornedStart": "MuiInputBase-adornedStart",
                                "colorSecondary": "MuiInputBase-colorSecondary MuiInput-colorSecondary",
                                "disabled": "Mui-disabled Mui-disabled",
                                "error": "Mui-error Mui-error",
                                "focused": "Mui-focused Mui-focused",
                                "formControl": "MuiInputBase-formControl MuiInput-formControl",
                                "fullWidth": "MuiInputBase-fullWidth MuiInput-fullWidth",
                                "input": "MuiInputBase-input MuiInput-input",
                                "inputAdornedEnd": "MuiInputBase-inputAdornedEnd",
                                "inputAdornedStart": "MuiInputBase-inputAdornedStart",
                                "inputHiddenLabel": "MuiInputBase-inputHiddenLabel",
                                "inputMarginDense": "MuiInputBase-inputMarginDense MuiInput-inputMarginDense",
                                "inputMultiline": "MuiInputBase-inputMultiline MuiInput-inputMultiline",
                                "inputTypeSearch": "MuiInputBase-inputTypeSearch MuiInput-inputTypeSearch",
                                "marginDense": "MuiInputBase-marginDense MuiInput-marginDense",
                                "multiline": "MuiInputBase-multiline MuiInput-multiline",
                                "root": "MuiInputBase-root MuiInput-root MuiInput-underline",
                              }
                            }
                            fullWidth={true}
                            inputComponent={
                              Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "propTypes": Object {
                                  "IconComponent": [Function],
                                  "MenuProps": [Function],
                                  "SelectDisplayProps": [Function],
                                  "aria-label": [Function],
                                  "autoFocus": [Function],
                                  "autoWidth": [Function],
                                  "children": [Function],
                                  "className": [Function],
                                  "classes": [Function],
                                  "defaultValue": [Function],
                                  "disabled": [Function],
                                  "displayEmpty": [Function],
                                  "inputRef": [Function],
                                  "labelId": [Function],
                                  "multiple": [Function],
                                  "name": [Function],
                                  "onBlur": [Function],
                                  "onChange": [Function],
                                  "onClose": [Function],
                                  "onFocus": [Function],
                                  "onOpen": [Function],
                                  "open": [Function],
                                  "readOnly": [Function],
                                  "renderValue": [Function],
                                  "tabIndex": [Function],
                                  "type": [Function],
                                  "value": [Function],
                                  "variant": [Function],
                                },
                                "render": [Function],
                              }
                            }
                            inputProps={
                              Object {
                                "IconComponent": Object {
                                  "$$typeof": Symbol(react.memo),
                                  "compare": null,
                                  "type": Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "render": [Function],
                                  },
                                },
                                "MenuProps": Object {
                                  "PaperProps": Object {
                                    "style": Object {
                                      "maxHeight": 256,
                                    },
                                  },
                                  "anchorOrigin": Object {
                                    "horizontal": "left",
                                    "vertical": "bottom",
                                  },
                                  "getContentAnchorEl": null,
                                },
                                "SelectDisplayProps": Object {
                                  "id": undefined,
                                },
                                "autoWidth": false,
                                "children": Array [
                                  <WithStyles(ForwardRef(MenuItem))
                                    value="CROSSPLAY"
                                  >
                                    CROSSPLAY
                                  </WithStyles(ForwardRef(MenuItem))>,
                                  <WithStyles(ForwardRef(MenuItem))
                                    value="PC"
                                  >
                                    PC
                                  </WithStyles(ForwardRef(MenuItem))>,
                                  <WithStyles(ForwardRef(MenuItem))
                                    value="PS4"
                                  >
                                    PS4
                                  </WithStyles(ForwardRef(MenuItem))>,
                                  <WithStyles(ForwardRef(MenuItem))
                                    value="SWITCH"
                                  >
                                    SWITCH
                                  </WithStyles(ForwardRef(MenuItem))>,
                                  <WithStyles(ForwardRef(MenuItem))
                                    value="XB1"
                                  >
                                    XB1
                                  </WithStyles(ForwardRef(MenuItem))>,
                                ],
                                "classes": Object {
                                  "disabled": "Mui-disabled",
                                  "filled": "MuiSelect-filled",
                                  "icon": "MuiSelect-icon",
                                  "iconFilled": "MuiSelect-iconFilled",
                                  "iconOpen": "MuiSelect-iconOpen",
                                  "iconOutlined": "MuiSelect-iconOutlined",
                                  "nativeInput": "MuiSelect-nativeInput",
                                  "outlined": "MuiSelect-outlined",
                                  "root": "MuiSelect-root",
                                  "select": "MuiSelect-select select",
                                  "selectMenu": "MuiSelect-selectMenu",
                                },
                                "displayEmpty": false,
                                "labelId": undefined,
                                "multiple": true,
                                "onClose": undefined,
                                "onOpen": undefined,
                                "open": undefined,
                                "renderValue": [Function],
                                "type": undefined,
                                "variant": "standard",
                              }
                            }
                            multiline={false}
                            onChange={[Function]}
                            type="text"
                            value={Array []}
                          >
                            <div
                              className="MuiInputBase-root MuiInput-root MuiInput-underline MuiInputBase-fullWidth MuiInput-fullWidth MuiInputBase-formControl MuiInput-formControl"
                              onClick={[Function]}
                            >
                              <ForwardRef(SelectInput)
                                IconComponent={
                                  Object {
                                    "$$typeof": Symbol(react.memo),
                                    "compare": null,
                                    "type": Object {
                                      "$$typeof": Symbol(react.forward_ref),
                                      "render": [Function],
                                    },
                                  }
                                }
                                MenuProps={
                                  Object {
                                    "PaperProps": Object {
                                      "style": Object {
                                        "maxHeight": 256,
                                      },
                                    },
                                    "anchorOrigin": Object {
                                      "horizontal": "left",
                                      "vertical": "bottom",
                                    },
                                    "getContentAnchorEl": null,
                                  }
                                }
                                SelectDisplayProps={
                                  Object {
                                    "id": undefined,
                                  }
                                }
                                aria-invalid={false}
                                autoFocus={false}
                                autoWidth={false}
                                className="MuiInputBase-input MuiInput-input"
                                classes={
                                  Object {
                                    "disabled": "Mui-disabled",
                                    "filled": "MuiSelect-filled",
                                    "icon": "MuiSelect-icon",
                                    "iconFilled": "MuiSelect-iconFilled",
                                    "iconOpen": "MuiSelect-iconOpen",
                                    "iconOutlined": "MuiSelect-iconOutlined",
                                    "nativeInput": "MuiSelect-nativeInput",
                                    "outlined": "MuiSelect-outlined",
                                    "root": "MuiSelect-root",
                                    "select": "MuiSelect-select select",
                                    "selectMenu": "MuiSelect-selectMenu",
                                  }
                                }
                                disabled={false}
                                displayEmpty={false}
                                inputRef={[Function]}
                                multiple={true}
                                onAnimationStart={[Function]}
                                onBlur={[Function]}
                                onChange={[Function]}
                                onFocus={[Function]}
                                renderValue={[Function]}
                                required={false}
                                value={Array []}
                                variant="standard"
                              >
                                <div
                                  aria-haspopup="listbox"
                                  className="MuiSelect-root MuiSelect-select select MuiSelect-selectMenu MuiInputBase-input MuiInput-input"
                                  onBlur={[Function]}
                                  onFocus={[Function]}
                                  onKeyDown={[Function]}
                                  onMouseDown={[Function]}
                                  role="button"
                                  tabIndex={0}
                                >
                                  <span
                                    dangerouslySetInnerHTML={
                                      Object {
                                        "__html": "&#8203;",
                                      }
                                    }
                                  />
                                </div>
                                <input
                                  aria-hidden={true}
                                  autoFocus={false}
                                  className="MuiSelect-nativeInput"
                                  onAnimationStart={[Function]}
                                  onChange={[Function]}
                                  required={false}
                                  tabIndex={-1}
                                  value=""
                                />
                                <ForwardRef(ArrowDropDownIcon)
                                  className="MuiSelect-icon"
                                >
                                  <WithStyles(ForwardRef(SvgIcon))
                                    className="MuiSelect-icon"
                                  >
                                    <ForwardRef(SvgIcon)
                                      className="MuiSelect-icon"
                                      classes={
                                        Object {
                                          "colorAction": "MuiSvgIcon-colorAction",
                                          "colorDisabled": "MuiSvgIcon-colorDisabled",
                                          "colorError": "MuiSvgIcon-colorError",
                                          "colorPrimary": "MuiSvgIcon-colorPrimary",
                                          "colorSecondary": "MuiSvgIcon-colorSecondary",
                                          "fontSizeInherit": "MuiSvgIcon-fontSizeInherit",
                                          "fontSizeLarge": "MuiSvgIcon-fontSizeLarge",
                                          "fontSizeSmall": "MuiSvgIcon-fontSizeSmall",
                                          "root": "MuiSvgIcon-root",
                                        }
                                      }
                                    >
                                      <svg
                                        aria-hidden={true}
                                        className="MuiSvgIcon-root MuiSelect-icon"
                                        focusable="false"
                                        viewBox="0 0 24 24"
                                      >
                                        <path
                                          d="M7 10l5 5 5-5z"
                                        />
                                      </svg>
                                    </ForwardRef(SvgIcon)>
                                  </WithStyles(ForwardRef(SvgIcon))>
                                </ForwardRef(ArrowDropDownIcon)>
                                <WithStyles(ForwardRef(Menu))
                                  MenuListProps={
                                    Object {
                                      "aria-labelledby": undefined,
                                      "disableListWrap": true,
                                      "role": "listbox",
                                    }
                                  }
                                  PaperProps={
                                    Object {
                                      "style": Object {
                                        "maxHeight": 256,
                                        "minWidth": undefined,
                                      },
                                    }
                                  }
                                  anchorEl={
                                    <div
                                      aria-haspopup="listbox"
                                      class="MuiSelect-root MuiSelect-select select MuiSelect-selectMenu MuiInputBase-input MuiInput-input"
                                      role="button"
                                      tabindex="0"
                                    >
                                      <span>
                                        ​
                                      </span>
                                    </div>
                                  }
                                  anchorOrigin={
                                    Object {
                                      "horizontal": "left",
                                      "vertical": "bottom",
                                    }
                                  }
                                  getContentAnchorEl={null}
                                  id="menu-"
                                  onClose={[Function]}
                                  open={false}
                                >
                                  <ForwardRef(Menu)
                                    MenuListProps={
                                      Object {
                                        "aria-labelledby": undefined,
                                        "disableListWrap": true,
                                        "role": "listbox",
                                      }
                                    }
                                    PaperProps={
                                      Object {
                                        "style": Object {
                                          "maxHeight": 256,
                                          "minWidth": undefined,
                                        },
                                      }
                                    }
                                    anchorEl={
                                      <div
                                        aria-haspopup="listbox"
                                        class="MuiSelect-root MuiSelect-select select MuiSelect-selectMenu MuiInputBase-input MuiInput-input"
                                        role="button"
                                        tabindex="0"
                                      >
                                        <span>
                                          ​
                                        </span>
                                      </div>
                                    }
                                    anchorOrigin={
                                      Object {
                                        "horizontal": "left",
                                        "vertical": "bottom",
                                      }
                                    }
                                    classes={
                                      Object {
                                        "list": "MuiMenu-list",
                                        "paper": "MuiMenu-paper",
                                      }
                                    }
                                    getContentAnchorEl={null}
                                    id="menu-"
                                    onClose={[Function]}
                                    open={false}
                                  >
                                    <WithStyles(ForwardRef(Popover))
                                      PaperProps={
                                        Object {
                                          "classes": Object {
                                            "root": "MuiMenu-paper",
                                          },
                                          "style": Object {
                                            "maxHeight": 256,
                                            "minWidth": undefined,
                                          },
                                        }
                                      }
                                      anchorEl={
                                        <div
                                          aria-haspopup="listbox"
                                          class="MuiSelect-root MuiSelect-select select MuiSelect-selectMenu MuiInputBase-input MuiInput-input"
                                          role="button"
                                          tabindex="0"
                                        >
                                          <span>
                                            ​
                                          </span>
                                        </div>
                                      }
                                      anchorOrigin={
                                        Object {
                                          "horizontal": "left",
                                          "vertical": "bottom",
                                        }
                                      }
                                      getContentAnchorEl={null}
                                      id="menu-"
                                      onClose={[Function]}
                                      onEntering={[Function]}
                                      open={false}
                                      transformOrigin={
                                        Object {
                                          "horizontal": "left",
                                          "vertical": "top",
                                        }
                                      }
                                      transitionDuration="auto"
                                    >
                                      <ForwardRef(Popover)
                                        PaperProps={
                                          Object {
                                            "classes": Object {
                                              "root": "MuiMenu-paper",
                                            },
                                            "style": Object {
                                              "maxHeight": 256,
                                              "minWidth": undefined,
                                            },
                                          }
                                        }
                                        anchorEl={
                                          <div
                                            aria-haspopup="listbox"
                                            class="MuiSelect-root MuiSelect-select select MuiSelect-selectMenu MuiInputBase-input MuiInput-input"
                                            role="button"
                                            tabindex="0"
                                          >
                                            <span>
                                              ​
                                            </span>
                                          </div>
                                        }
                                        anchorOrigin={
                                          Object {
                                            "horizontal": "left",
                                            "vertical": "bottom",
                                          }
                                        }
                                        classes={
                                          Object {
                                            "paper": "MuiPopover-paper",
                                            "root": "MuiPopover-root",
                                          }
                                        }
                                        getContentAnchorEl={null}
                                        id="menu-"
                                        onClose={[Function]}
                                        onEntering={[Function]}
                                        open={false}
                                        transformOrigin={
                                          Object {
                                            "horizontal": "left",
                                            "vertical": "top",
                                          }
                                        }
                                        transitionDuration="auto"
                                      >
                                        <ForwardRef(Modal)
                                          BackdropProps={
                                            Object {
                                              "invisible": true,
                                            }
                                          }
                                          className="MuiPopover-root"
                                          container={<body />}
                                          id="menu-"
                                          onClose={[Function]}
                                          open={false}
                                        />
                                      </ForwardRef(Popover)>
                                    </WithStyles(ForwardRef(Popover))>
                                  </ForwardRef(Menu)>
                                </WithStyles(ForwardRef(Menu))>
                              </ForwardRef(SelectInput)>
                            </div>
                          </ForwardRef(InputBase)>
                        </WithStyles(ForwardRef(InputBase))>
                      </ForwardRef(Input)>
                    </WithStyles(ForwardRef(Input))>
                  </ForwardRef(Select)>
                </WithStyles(ForwardRef(Select))>
              </div>
            </ForwardRef(FormControl)>
          </WithStyles(ForwardRef(FormControl))>
        </ForwardRef(TextField)>
      </WithStyles(ForwardRef(TextField))>
    </SelectField>
  </ReduxFormSelect>
</PlatformsBase>
`;
