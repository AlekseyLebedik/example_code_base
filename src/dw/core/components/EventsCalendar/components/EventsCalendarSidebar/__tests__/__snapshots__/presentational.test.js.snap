// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`EventsCalendarSidebar renders EventsCalendarSidebar with no onSelectSlot function 1`] = `
<div
  className="eventsCalendarSidebarContainer"
  data-cy="eventsCalendarSidebarContainer"
  onMouseEnter={[Function]}
  onMouseLeave={[Function]}
>
  <div
    className="eventsCalendarSidebarTop"
  >
    <div
      className="buttonGroup"
    >
      <WithStyles(WrappedIcon)
        className="leftButton"
        icon="date_range"
        onClick={[Function]}
        tooltip="Calendar View"
        type="button"
        variant="contained"
      />
      <WithStyles(WrappedIcon)
        className="middleButton"
        icon="view_list"
        onClick={[Function]}
        tooltip="List View"
        type="button"
        variant="outlined"
      />
      <WithStyles(WrappedIcon)
        className="rightButton"
        icon="clear_all"
        onClick={[Function]}
        tooltip="Timeline View"
        type="button"
        variant="outlined"
      />
    </div>
    <ShareLinkTrigger />
    <CreateEventTrigger />
  </div>
  <CalendarPresets
    adminUser={true}
    onPresetsUpdate={[MockFunction]}
    presetOptions={Array []}
    projectId="1"
    setCalendarSettings={[MockFunction]}
  />
  <MiniCalendar
    classes={Object {}}
    daysWithDots={Object {}}
    navigateCalendar={[MockFunction]}
    selectedDay={"2019-01-01T00:00:00.000Z"}
    userTimezone="UTC"
  />
  <FiltersTableBase
    classes={Object {}}
    disabledFilters={Object {}}
    eventGroups={
      Array [
        Object {
          "EventDetails": [Function],
          "GroupLink": [Function],
          "classes": Object {
            "applied": "applied-style",
            "approved": "approved-style",
            "cancelled": "cancelled-style",
            "expired": "expired-style",
            "pending": "pending-style",
            "rejected": "rejected-style",
            "scheduled": "scheduled-style",
            "test-failed": "test-failed-style",
            "testing": "testing-style",
          },
          "customEventStyles": [Function],
          "eventDragDrop": [MockFunction],
          "eventTypes": Object {
            "eventManager": Object {
              "children": Object {
                "checkedByMe": Object {
                  "children": null,
                  "name": "Checked By Me",
                  "selectedByDefault": false,
                },
                "status": Object {
                  "children": Object {
                    "applied": Object {
                      "children": null,
                      "name": "Applied",
                      "selectedByDefault": true,
                    },
                    "approved": Object {
                      "children": null,
                      "name": "Approved",
                      "selectedByDefault": true,
                    },
                    "cancelled": Object {
                      "children": null,
                      "name": "Cancelled",
                      "selectedByDefault": true,
                    },
                    "expired": Object {
                      "children": null,
                      "name": "Expired",
                      "selectedByDefault": true,
                    },
                    "pending": Object {
                      "children": null,
                      "name": "Pending",
                      "selectedByDefault": true,
                    },
                    "rejected": Object {
                      "children": null,
                      "name": "Rejected",
                      "selectedByDefault": true,
                    },
                    "scheduled": Object {
                      "children": null,
                      "name": "Scheduled",
                      "selectedByDefault": true,
                    },
                    "test-failed": Object {
                      "children": null,
                      "name": "Test Failed",
                      "selectedByDefault": true,
                    },
                    "testing": Object {
                      "children": null,
                      "name": "Testing",
                      "selectedByDefault": true,
                    },
                  },
                  "name": "Status",
                },
              },
              "name": "Event Manager",
              "selectedByDefault": true,
            },
          },
          "events": Array [
            Object {
              "allDay": false,
              "end": 1555460772,
              "id": 1,
              "publish_at": 1555460772,
              "start": 1555460772,
              "status": "approved",
              "title": "test",
              "type": "eventManager",
            },
            Object {
              "allDay": false,
              "end": 1555460772,
              "id": 1,
              "publish_at": 1555460772,
              "start": 1555460772,
              "status": "pending",
              "title": "test 2",
              "type": "eventManager",
            },
          ],
          "loading": Object {
            "error": null,
            "isLoading": false,
          },
          "modifyEvent": [MockFunction],
          "type": "eventManager",
          "wrapper": [MockFunction],
        },
      ]
    }
    onFetchEvents={[MockFunction]}
    setCalendarSettings={[MockFunction]}
  />
</div>
`;

exports[`EventsCalendarSidebar renders default EventsCalendarSidebar with event tags 1`] = `
<div
  className="eventsCalendarSidebarContainer"
  data-cy="eventsCalendarSidebarContainer"
  onMouseEnter={[Function]}
  onMouseLeave={[Function]}
>
  <div
    className="eventsCalendarSidebarTop"
  >
    <div
      className="buttonGroup"
    >
      <WithStyles(WrappedIcon)
        className="leftButton"
        icon="date_range"
        onClick={[Function]}
        tooltip="Calendar View"
        type="button"
        variant="contained"
      />
      <WithStyles(WrappedIcon)
        className="middleButton"
        icon="view_list"
        onClick={[Function]}
        tooltip="List View"
        type="button"
        variant="outlined"
      />
      <WithStyles(WrappedIcon)
        className="rightButton"
        icon="clear_all"
        onClick={[Function]}
        tooltip="Timeline View"
        type="button"
        variant="outlined"
      />
    </div>
    <ShareLinkTrigger />
    <CreateEventTrigger />
  </div>
  <CalendarPresets
    adminUser={true}
    onPresetsUpdate={[MockFunction]}
    presetOptions={Array []}
    projectId="1"
    setCalendarSettings={[MockFunction]}
  />
  <MiniCalendar
    classes={Object {}}
    daysWithDots={Object {}}
    navigateCalendar={[MockFunction]}
    selectedDay={"2019-01-01T00:00:00.000Z"}
    userTimezone="UTC"
  />
  <FiltersTableBase
    classes={Object {}}
    disabledFilters={Object {}}
    eventGroups={
      Array [
        Object {
          "EventDetails": [Function],
          "GroupLink": [Function],
          "classes": Object {
            "applied": "applied-style",
            "approved": "approved-style",
            "cancelled": "cancelled-style",
            "expired": "expired-style",
            "pending": "pending-style",
            "rejected": "rejected-style",
            "scheduled": "scheduled-style",
            "test-failed": "test-failed-style",
            "testing": "testing-style",
          },
          "customEventStyles": [Function],
          "eventDragDrop": [MockFunction],
          "eventTypes": Object {
            "eventManager": Object {
              "children": Object {
                "checkedByMe": Object {
                  "children": null,
                  "name": "Checked By Me",
                  "selectedByDefault": false,
                },
                "status": Object {
                  "children": Object {
                    "applied": Object {
                      "children": null,
                      "name": "Applied",
                      "selectedByDefault": true,
                    },
                    "approved": Object {
                      "children": null,
                      "name": "Approved",
                      "selectedByDefault": true,
                    },
                    "cancelled": Object {
                      "children": null,
                      "name": "Cancelled",
                      "selectedByDefault": true,
                    },
                    "expired": Object {
                      "children": null,
                      "name": "Expired",
                      "selectedByDefault": true,
                    },
                    "pending": Object {
                      "children": null,
                      "name": "Pending",
                      "selectedByDefault": true,
                    },
                    "rejected": Object {
                      "children": null,
                      "name": "Rejected",
                      "selectedByDefault": true,
                    },
                    "scheduled": Object {
                      "children": null,
                      "name": "Scheduled",
                      "selectedByDefault": true,
                    },
                    "test-failed": Object {
                      "children": null,
                      "name": "Test Failed",
                      "selectedByDefault": true,
                    },
                    "testing": Object {
                      "children": null,
                      "name": "Testing",
                      "selectedByDefault": true,
                    },
                  },
                  "name": "Status",
                },
              },
              "name": "Event Manager",
              "selectedByDefault": true,
            },
          },
          "events": Array [
            Object {
              "allDay": false,
              "end": 1555460772,
              "id": 1,
              "publish_at": 1555460772,
              "start": 1555460772,
              "status": "approved",
              "title": "test",
              "type": "eventManager",
            },
            Object {
              "allDay": false,
              "end": 1555460772,
              "id": 1,
              "publish_at": 1555460772,
              "start": 1555460772,
              "status": "pending",
              "title": "test 2",
              "type": "eventManager",
            },
          ],
          "loading": Object {
            "error": null,
            "isLoading": false,
          },
          "modifyEvent": [MockFunction],
          "type": "eventManager",
          "wrapper": [MockFunction],
        },
      ]
    }
    onFetchEvents={[MockFunction]}
    setCalendarSettings={[MockFunction]}
  />
</div>
`;

exports[`EventsCalendarSidebar renders default EventsCalendarSidebar with no choices selected 1`] = `
<div
  className="eventsCalendarSidebarContainer"
  data-cy="eventsCalendarSidebarContainer"
  onMouseEnter={[Function]}
  onMouseLeave={[Function]}
>
  <div
    className="eventsCalendarSidebarTop"
  >
    <div
      className="buttonGroup"
    >
      <WithStyles(WrappedIcon)
        className="leftButton"
        icon="date_range"
        onClick={[Function]}
        tooltip="Calendar View"
        type="button"
        variant="contained"
      />
      <WithStyles(WrappedIcon)
        className="middleButton"
        icon="view_list"
        onClick={[Function]}
        tooltip="List View"
        type="button"
        variant="outlined"
      />
      <WithStyles(WrappedIcon)
        className="rightButton"
        icon="clear_all"
        onClick={[Function]}
        tooltip="Timeline View"
        type="button"
        variant="outlined"
      />
    </div>
    <ShareLinkTrigger />
    <CreateEventTrigger />
  </div>
  <CalendarPresets
    adminUser={true}
    onPresetsUpdate={[MockFunction]}
    presetOptions={Array []}
    projectId="1"
    setCalendarSettings={[MockFunction]}
  />
  <MiniCalendar
    classes={Object {}}
    daysWithDots={Object {}}
    navigateCalendar={[MockFunction]}
    selectedDay={"2019-01-01T00:00:00.000Z"}
    userTimezone="UTC"
  />
  <FiltersTableBase
    classes={Object {}}
    disabledFilters={Object {}}
    eventGroups={
      Array [
        Object {
          "EventDetails": [Function],
          "GroupLink": [Function],
          "classes": Object {
            "applied": "applied-style",
            "approved": "approved-style",
            "cancelled": "cancelled-style",
            "expired": "expired-style",
            "pending": "pending-style",
            "rejected": "rejected-style",
            "scheduled": "scheduled-style",
            "test-failed": "test-failed-style",
            "testing": "testing-style",
          },
          "customEventStyles": [Function],
          "eventDragDrop": [MockFunction],
          "eventTypes": Object {
            "eventManager": Object {
              "children": Object {
                "checkedByMe": Object {
                  "children": null,
                  "name": "Checked By Me",
                  "selectedByDefault": false,
                },
                "status": Object {
                  "children": Object {
                    "applied": Object {
                      "children": null,
                      "name": "Applied",
                      "selectedByDefault": true,
                    },
                    "approved": Object {
                      "children": null,
                      "name": "Approved",
                      "selectedByDefault": true,
                    },
                    "cancelled": Object {
                      "children": null,
                      "name": "Cancelled",
                      "selectedByDefault": true,
                    },
                    "expired": Object {
                      "children": null,
                      "name": "Expired",
                      "selectedByDefault": true,
                    },
                    "pending": Object {
                      "children": null,
                      "name": "Pending",
                      "selectedByDefault": true,
                    },
                    "rejected": Object {
                      "children": null,
                      "name": "Rejected",
                      "selectedByDefault": true,
                    },
                    "scheduled": Object {
                      "children": null,
                      "name": "Scheduled",
                      "selectedByDefault": true,
                    },
                    "test-failed": Object {
                      "children": null,
                      "name": "Test Failed",
                      "selectedByDefault": true,
                    },
                    "testing": Object {
                      "children": null,
                      "name": "Testing",
                      "selectedByDefault": true,
                    },
                  },
                  "name": "Status",
                },
              },
              "name": "Event Manager",
              "selectedByDefault": true,
            },
          },
          "events": Array [
            Object {
              "allDay": false,
              "end": 1555460772,
              "id": 1,
              "publish_at": 1555460772,
              "start": 1555460772,
              "status": "approved",
              "title": "test",
              "type": "eventManager",
            },
            Object {
              "allDay": false,
              "end": 1555460772,
              "id": 1,
              "publish_at": 1555460772,
              "start": 1555460772,
              "status": "pending",
              "title": "test 2",
              "type": "eventManager",
            },
          ],
          "loading": Object {
            "error": null,
            "isLoading": false,
          },
          "modifyEvent": [MockFunction],
          "type": "eventManager",
          "wrapper": [MockFunction],
        },
      ]
    }
    onFetchEvents={[MockFunction]}
    setCalendarSettings={[MockFunction]}
  />
</div>
`;
